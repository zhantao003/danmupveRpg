// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonData.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETModel {

  #region Messages
  public partial class DUserInfo : pb::IMessage {
    private static readonly pb::MessageParser<DUserInfo> _parser = new pb::MessageParser<DUserInfo>(() => (DUserInfo)MessagePool.Instance.Fetch(typeof(DUserInfo)));
    public static pb::MessageParser<DUserInfo> Parser { get { return _parser; } }

    private long playerId_;
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    private string platformId_ = "";
    /// <summary>
    ///平台ID
    /// </summary>
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private long money_;
    /// <summary>
    /// 金币
    /// </summary>
    public long Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    private int diamond_;
    /// <summary>
    /// 钻石
    /// </summary>
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    private int lev_;
    /// <summary>
    /// 等级
    /// </summary>
    public int Lev {
      get { return lev_; }
      set {
        lev_ = value;
      }
    }

    private int exp_;
    /// <summary>
    /// 经验值
    /// </summary>
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    private int vipLv_;
    /// <summary>
    /// vip等级
    /// </summary>
    public int VipLv {
      get { return vipLv_; }
      set {
        vipLv_ = value;
      }
    }

    private int vipExp_;
    /// <summary>
    /// vip经验值
    /// </summary>
    public int VipExp {
      get { return vipExp_; }
      set {
        vipExp_ = value;
      }
    }

    private string nickName_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string phone_ = "";
    /// <summary>
    /// 电话
    /// </summary>
    public string Phone {
      get { return phone_; }
      set {
        phone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string realName_ = "";
    /// <summary>
    /// 真实名字
    /// </summary>
    public string RealName {
      get { return realName_; }
      set {
        realName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string idCard_ = "";
    /// <summary>
    /// 身份证
    /// </summary>
    public string IdCard {
      get { return idCard_; }
      set {
        idCard_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string head_ = "";
    /// <summary>
    /// 头像
    /// </summary>
    public string Head {
      get { return head_; }
      set {
        head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string headBoard_ = "";
    /// <summary>
    /// 头像框
    /// </summary>
    public string HeadBoard {
      get { return headBoard_; }
      set {
        headBoard_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string curRole_ = "";
    /// <summary>
    /// 当前选择角色ID
    /// </summary>
    public string CurRole {
      get { return curRole_; }
      set {
        curRole_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long score_;
    /// <summary>
    /// 排位分
    /// </summary>
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (PlatformId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlatformId);
      }
      if (Sex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sex);
      }
      if (Money != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Money);
      }
      if (Diamond != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Diamond);
      }
      if (Lev != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Lev);
      }
      if (Exp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Exp);
      }
      if (VipLv != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(VipLv);
      }
      if (VipExp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(VipExp);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(NickName);
      }
      if (Phone.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Phone);
      }
      if (RealName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(RealName);
      }
      if (IdCard.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(IdCard);
      }
      if (Head.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Head);
      }
      if (HeadBoard.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(HeadBoard);
      }
      if (CurRole.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CurRole);
      }
      if (Score != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(Score);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Money != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Money);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      if (Lev != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lev);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (VipLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLv);
      }
      if (VipExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipExp);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Phone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phone);
      }
      if (RealName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RealName);
      }
      if (IdCard.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdCard);
      }
      if (Head.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
      }
      if (HeadBoard.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadBoard);
      }
      if (CurRole.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CurRole);
      }
      if (Score != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerId_ = 0;
      platformId_ = "";
      sex_ = 0;
      money_ = 0;
      diamond_ = 0;
      lev_ = 0;
      exp_ = 0;
      vipLv_ = 0;
      vipExp_ = 0;
      nickName_ = "";
      phone_ = "";
      realName_ = "";
      idCard_ = "";
      head_ = "";
      headBoard_ = "";
      curRole_ = "";
      score_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            PlatformId = input.ReadString();
            break;
          }
          case 24: {
            Sex = input.ReadInt32();
            break;
          }
          case 32: {
            Money = input.ReadInt64();
            break;
          }
          case 40: {
            Diamond = input.ReadInt32();
            break;
          }
          case 48: {
            Lev = input.ReadInt32();
            break;
          }
          case 56: {
            Exp = input.ReadInt32();
            break;
          }
          case 64: {
            VipLv = input.ReadInt32();
            break;
          }
          case 72: {
            VipExp = input.ReadInt32();
            break;
          }
          case 82: {
            NickName = input.ReadString();
            break;
          }
          case 90: {
            Phone = input.ReadString();
            break;
          }
          case 98: {
            RealName = input.ReadString();
            break;
          }
          case 106: {
            IdCard = input.ReadString();
            break;
          }
          case 114: {
            Head = input.ReadString();
            break;
          }
          case 122: {
            HeadBoard = input.ReadString();
            break;
          }
          case 130: {
            CurRole = input.ReadString();
            break;
          }
          case 136: {
            Score = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 缩略信息
  /// </summary>
  public partial class DUserSimpleInfo : pb::IMessage {
    private static readonly pb::MessageParser<DUserSimpleInfo> _parser = new pb::MessageParser<DUserSimpleInfo>(() => (DUserSimpleInfo)MessagePool.Instance.Fetch(typeof(DUserSimpleInfo)));
    public static pb::MessageParser<DUserSimpleInfo> Parser { get { return _parser; } }

    private long playerId_;
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    private int sex_;
    /// <summary>
    /// 性别
    /// </summary>
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private int lev_;
    /// <summary>
    /// 等级
    /// </summary>
    public int Lev {
      get { return lev_; }
      set {
        lev_ = value;
      }
    }

    private int vipLv_;
    /// <summary>
    /// vip等级
    /// </summary>
    public int VipLv {
      get { return vipLv_; }
      set {
        vipLv_ = value;
      }
    }

    private string nickName_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string idCard_ = "";
    /// <summary>
    /// 身份证
    /// </summary>
    public string IdCard {
      get { return idCard_; }
      set {
        idCard_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string head_ = "";
    /// <summary>
    /// 头像
    /// </summary>
    public string Head {
      get { return head_; }
      set {
        head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string headBoard_ = "";
    /// <summary>
    /// 头像框
    /// </summary>
    public string HeadBoard {
      get { return headBoard_; }
      set {
        headBoard_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string curRole_ = "";
    /// <summary>
    /// 当前选择角色ID
    /// </summary>
    public string CurRole {
      get { return curRole_; }
      set {
        curRole_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long timeLastLogin_;
    /// <summary>
    ///最后登录的时间戳
    /// </summary>
    public long TimeLastLogin {
      get { return timeLastLogin_; }
      set {
        timeLastLogin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Sex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sex);
      }
      if (Lev != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Lev);
      }
      if (VipLv != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(VipLv);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NickName);
      }
      if (IdCard.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IdCard);
      }
      if (Head.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Head);
      }
      if (HeadBoard.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(HeadBoard);
      }
      if (CurRole.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CurRole);
      }
      if (TimeLastLogin != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(TimeLastLogin);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Lev != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lev);
      }
      if (VipLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLv);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (IdCard.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdCard);
      }
      if (Head.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
      }
      if (HeadBoard.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadBoard);
      }
      if (CurRole.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurRole);
      }
      if (TimeLastLogin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeLastLogin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerId_ = 0;
      sex_ = 0;
      lev_ = 0;
      vipLv_ = 0;
      nickName_ = "";
      idCard_ = "";
      head_ = "";
      headBoard_ = "";
      curRole_ = "";
      timeLastLogin_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            Sex = input.ReadInt32();
            break;
          }
          case 24: {
            Lev = input.ReadInt32();
            break;
          }
          case 32: {
            VipLv = input.ReadInt32();
            break;
          }
          case 42: {
            NickName = input.ReadString();
            break;
          }
          case 50: {
            IdCard = input.ReadString();
            break;
          }
          case 58: {
            Head = input.ReadString();
            break;
          }
          case 66: {
            HeadBoard = input.ReadString();
            break;
          }
          case 74: {
            CurRole = input.ReadString();
            break;
          }
          case 80: {
            TimeLastLogin = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 缩略信息
  /// </summary>
  public partial class DUserListInfo : pb::IMessage {
    private static readonly pb::MessageParser<DUserListInfo> _parser = new pb::MessageParser<DUserListInfo>(() => (DUserListInfo)MessagePool.Instance.Fetch(typeof(DUserListInfo)));
    public static pb::MessageParser<DUserListInfo> Parser { get { return _parser; } }

    private long playerId_;
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    private string platformId_ = "";
    /// <summary>
    /// 平台ID
    /// </summary>
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string nickName_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string head_ = "";
    /// <summary>
    /// 头像
    /// </summary>
    public string Head {
      get { return head_; }
      set {
        head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string roomId_ = "";
    /// <summary>
    /// 房间ID
    /// </summary>
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long score_;
    /// <summary>
    /// 排位分
    /// </summary>
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (PlatformId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlatformId);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NickName);
      }
      if (Head.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Head);
      }
      if (RoomId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RoomId);
      }
      if (Score != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Score);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Head.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
      }
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerId_ = 0;
      platformId_ = "";
      nickName_ = "";
      head_ = "";
      roomId_ = "";
      score_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            PlatformId = input.ReadString();
            break;
          }
          case 26: {
            NickName = input.ReadString();
            break;
          }
          case 34: {
            Head = input.ReadString();
            break;
          }
          case 42: {
            RoomId = input.ReadString();
            break;
          }
          case 48: {
            Score = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class DPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<DPlayerInfo> _parser = new pb::MessageParser<DPlayerInfo>(() => (DPlayerInfo)MessagePool.Instance.Fetch(typeof(DPlayerInfo)));
    public static pb::MessageParser<DPlayerInfo> Parser { get { return _parser; } }

    private long playerId_;
    /// <summary>
    /// 用户Id
    /// </summary>
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    private string platformId_ = "";
    /// <summary>
    /// 平台ID
    /// </summary>
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string playerName_ = "";
    /// <summary>
    /// 用户名字
    /// </summary>
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string playerHead_ = "";
    /// <summary>
    /// 用户头像
    /// </summary>
    public string PlayerHead {
      get { return playerHead_; }
      set {
        playerHead_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string playerHeadBG_ = "";
    /// <summary>
    /// 用户头像框
    /// </summary>
    public string PlayerHeadBG {
      get { return playerHeadBG_; }
      set {
        playerHeadBG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int playerRoleID_;
    /// <summary>
    /// 用户角色
    /// </summary>
    public int PlayerRoleID {
      get { return playerRoleID_; }
      set {
        playerRoleID_ = value;
      }
    }

    private string playerAvatar_ = "";
    /// <summary>
    /// 用户角色皮肤
    /// </summary>
    public string PlayerAvatar {
      get { return playerAvatar_; }
      set {
        playerAvatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int playerRoleLev_;
    /// <summary>
    /// 用户角色等级
    /// </summary>
    public int PlayerRoleLev {
      get { return playerRoleLev_; }
      set {
        playerRoleLev_ = value;
      }
    }

    private int playerLev_;
    /// <summary>
    /// 用户等级
    /// </summary>
    public int PlayerLev {
      get { return playerLev_; }
      set {
        playerLev_ = value;
      }
    }

    private long score_;
    /// <summary>
    /// 排位分
    /// </summary>
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (PlatformId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlatformId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlayerName);
      }
      if (PlayerHead.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PlayerHead);
      }
      if (PlayerHeadBG.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PlayerHeadBG);
      }
      if (PlayerRoleID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayerRoleID);
      }
      if (PlayerAvatar.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PlayerAvatar);
      }
      if (PlayerRoleLev != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PlayerRoleLev);
      }
      if (PlayerLev != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PlayerLev);
      }
      if (Score != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Score);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (PlayerHead.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerHead);
      }
      if (PlayerHeadBG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerHeadBG);
      }
      if (PlayerRoleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerRoleID);
      }
      if (PlayerAvatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerAvatar);
      }
      if (PlayerRoleLev != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerRoleLev);
      }
      if (PlayerLev != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLev);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerId_ = 0;
      platformId_ = "";
      playerName_ = "";
      playerHead_ = "";
      playerHeadBG_ = "";
      playerRoleID_ = 0;
      playerAvatar_ = "";
      playerRoleLev_ = 0;
      playerLev_ = 0;
      score_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            PlatformId = input.ReadString();
            break;
          }
          case 26: {
            PlayerName = input.ReadString();
            break;
          }
          case 34: {
            PlayerHead = input.ReadString();
            break;
          }
          case 42: {
            PlayerHeadBG = input.ReadString();
            break;
          }
          case 48: {
            PlayerRoleID = input.ReadInt32();
            break;
          }
          case 58: {
            PlayerAvatar = input.ReadString();
            break;
          }
          case 64: {
            PlayerRoleLev = input.ReadInt32();
            break;
          }
          case 72: {
            PlayerLev = input.ReadInt32();
            break;
          }
          case 80: {
            Score = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class DRoomConfig : pb::IMessage {
    private static readonly pb::MessageParser<DRoomConfig> _parser = new pb::MessageParser<DRoomConfig>(() => (DRoomConfig)MessagePool.Instance.Fetch(typeof(DRoomConfig)));
    public static pb::MessageParser<DRoomConfig> Parser { get { return _parser; } }

    private int maxPlayer_;
    /// <summary>
    /// 最大玩家数
    /// </summary>
    public int MaxPlayer {
      get { return maxPlayer_; }
      set {
        maxPlayer_ = value;
      }
    }

    private int mapId_;
    /// <summary>
    /// 地图ID
    /// </summary>
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxPlayer != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxPlayer);
      }
      if (MapId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MaxPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayer);
      }
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      maxPlayer_ = 0;
      mapId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxPlayer = input.ReadInt32();
            break;
          }
          case 16: {
            MapId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class DRoomSeatInfo : pb::IMessage {
    private static readonly pb::MessageParser<DRoomSeatInfo> _parser = new pb::MessageParser<DRoomSeatInfo>(() => (DRoomSeatInfo)MessagePool.Instance.Fetch(typeof(DRoomSeatInfo)));
    public static pb::MessageParser<DRoomSeatInfo> Parser { get { return _parser; } }

    private int seatIdx_;
    /// <summary>
    /// 座位
    /// </summary>
    public int SeatIdx {
      get { return seatIdx_; }
      set {
        seatIdx_ = value;
      }
    }

    private bool isReady_;
    /// <summary>
    /// 是否准备
    /// </summary>
    public bool IsReady {
      get { return isReady_; }
      set {
        isReady_ = value;
      }
    }

    private global::ETModel.DPlayerInfo playerInfo_;
    /// <summary>
    /// 玩家信息
    /// </summary>
    public global::ETModel.DPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    private int camp_;
    /// <summary>
    /// 阵营
    /// </summary>
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIdx);
      }
      if (IsReady != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsReady);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayerInfo);
      }
      if (Camp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Camp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SeatIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIdx);
      }
      if (IsReady != false) {
        size += 1 + 1;
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIdx_ = 0;
      isReady_ = false;
      if (playerInfo_ != null) MessagePool.Instance.Recycle(playerInfo_); playerInfo_ = null;
      camp_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIdx = input.ReadInt32();
            break;
          }
          case 16: {
            IsReady = input.ReadBool();
            break;
          }
          case 26: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::ETModel.DPlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 32: {
            Camp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class DRoomInfo : pb::IMessage {
    private static readonly pb::MessageParser<DRoomInfo> _parser = new pb::MessageParser<DRoomInfo>(() => (DRoomInfo)MessagePool.Instance.Fetch(typeof(DRoomInfo)));
    public static pb::MessageParser<DRoomInfo> Parser { get { return _parser; } }

    private string roomId_ = "";
    /// <summary>
    /// 房间ID
    /// </summary>
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int randSeed_;
    /// <summary>
    ///随机种子
    /// </summary>
    public int RandSeed {
      get { return randSeed_; }
      set {
        randSeed_ = value;
      }
    }

    private global::ETModel.DRoomConfig roomConfig_;
    /// <summary>
    /// 房间配置
    /// </summary>
    public global::ETModel.DRoomConfig RoomConfig {
      get { return roomConfig_; }
      set {
        roomConfig_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.DRoomSeatInfo> _repeated_seats_codec
        = pb::FieldCodec.ForMessage(34, global::ETModel.DRoomSeatInfo.Parser);
    private pbc::RepeatedField<global::ETModel.DRoomSeatInfo> seats_ = new pbc::RepeatedField<global::ETModel.DRoomSeatInfo>();
    /// <summary>
    /// 座位信息
    /// </summary>
    public pbc::RepeatedField<global::ETModel.DRoomSeatInfo> Seats {
      get { return seats_; }
      set { seats_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (RandSeed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RandSeed);
      }
      if (roomConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomConfig);
      }
      seats_.WriteTo(output, _repeated_seats_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (RandSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandSeed);
      }
      if (roomConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomConfig);
      }
      size += seats_.CalculateSize(_repeated_seats_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = "";
      randSeed_ = 0;
      if (roomConfig_ != null) MessagePool.Instance.Recycle(roomConfig_); roomConfig_ = null;
      for (int i = 0; i < seats_.Count; i++) { MessagePool.Instance.Recycle(seats_[i]); }
      seats_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 16: {
            RandSeed = input.ReadInt32();
            break;
          }
          case 26: {
            if (roomConfig_ == null) {
              roomConfig_ = new global::ETModel.DRoomConfig();
            }
            input.ReadMessage(roomConfig_);
            break;
          }
          case 34: {
            seats_.AddEntriesFrom(input, _repeated_seats_codec);
            break;
          }
        }
      }
    }

  }

  public partial class DRoomSimpleInfo : pb::IMessage {
    private static readonly pb::MessageParser<DRoomSimpleInfo> _parser = new pb::MessageParser<DRoomSimpleInfo>(() => (DRoomSimpleInfo)MessagePool.Instance.Fetch(typeof(DRoomSimpleInfo)));
    public static pb::MessageParser<DRoomSimpleInfo> Parser { get { return _parser; } }

    private string roomId_ = "";
    /// <summary>
    /// 房间ID
    /// </summary>
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETModel.DRoomConfig roomConfig_;
    /// <summary>
    /// 房间配置
    /// </summary>
    public global::ETModel.DRoomConfig RoomConfig {
      get { return roomConfig_; }
      set {
        roomConfig_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (roomConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomConfig);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (roomConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomConfig);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = "";
      if (roomConfig_ != null) MessagePool.Instance.Recycle(roomConfig_); roomConfig_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            if (roomConfig_ == null) {
              roomConfig_ = new global::ETModel.DRoomConfig();
            }
            input.ReadMessage(roomConfig_);
            break;
          }
        }
      }
    }

  }

  public partial class DPackIconInfo : pb::IMessage {
    private static readonly pb::MessageParser<DPackIconInfo> _parser = new pb::MessageParser<DPackIconInfo>(() => (DPackIconInfo)MessagePool.Instance.Fetch(typeof(DPackIconInfo)));
    public static pb::MessageParser<DPackIconInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<string> _repeated_icon_codec
        = pb::FieldCodec.ForString(10);
    private pbc::RepeatedField<string> icon_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 头像
    /// </summary>
    public pbc::RepeatedField<string> Icon {
      get { return icon_; }
      set { icon_ = value; }
    }

    private static readonly pb::FieldCodec<string> _repeated_iconBG_codec
        = pb::FieldCodec.ForString(18);
    private pbc::RepeatedField<string> iconBG_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 头像框
    /// </summary>
    public pbc::RepeatedField<string> IconBG {
      get { return iconBG_; }
      set { iconBG_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      icon_.WriteTo(output, _repeated_icon_codec);
      iconBG_.WriteTo(output, _repeated_iconBG_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += icon_.CalculateSize(_repeated_icon_codec);
      size += iconBG_.CalculateSize(_repeated_iconBG_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      icon_.Clear();
      iconBG_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 18: {
            iconBG_.AddEntriesFrom(input, _repeated_iconBG_codec);
            break;
          }
        }
      }
    }

  }

  public partial class DGameUnit : pb::IMessage {
    private static readonly pb::MessageParser<DGameUnit> _parser = new pb::MessageParser<DGameUnit>(() => (DGameUnit)MessagePool.Instance.Fetch(typeof(DGameUnit)));
    public static pb::MessageParser<DGameUnit> Parser { get { return _parser; } }

    private int seatIdx_;
    /// <summary>
    ///座位号
    /// </summary>
    public int SeatIdx {
      get { return seatIdx_; }
      set {
        seatIdx_ = value;
      }
    }

    private int curSlot_;
    /// <summary>
    /// 当前所在格
    /// </summary>
    public int CurSlot {
      get { return curSlot_; }
      set {
        curSlot_ = value;
      }
    }

    private int dir_;
    /// <summary>
    /// 当前前进方向
    /// </summary>
    public int Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    private int cash_;
    /// <summary>
    /// 金币
    /// </summary>
    public int Cash {
      get { return cash_; }
      set {
        cash_ = value;
      }
    }

    private int saving_;
    /// <summary>
    /// 存款
    /// </summary>
    public int Saving {
      get { return saving_; }
      set {
        saving_ = value;
      }
    }

    private int tickets_;
    /// <summary>
    /// 点卷
    /// </summary>
    public int Tickets {
      get { return tickets_; }
      set {
        tickets_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIdx);
      }
      if (CurSlot != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurSlot);
      }
      if (Dir != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Dir);
      }
      if (Cash != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Cash);
      }
      if (Saving != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Saving);
      }
      if (Tickets != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Tickets);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SeatIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIdx);
      }
      if (CurSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurSlot);
      }
      if (Dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dir);
      }
      if (Cash != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
      }
      if (Saving != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Saving);
      }
      if (Tickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tickets);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      seatIdx_ = 0;
      curSlot_ = 0;
      dir_ = 0;
      cash_ = 0;
      saving_ = 0;
      tickets_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatIdx = input.ReadInt32();
            break;
          }
          case 16: {
            CurSlot = input.ReadInt32();
            break;
          }
          case 24: {
            Dir = input.ReadInt32();
            break;
          }
          case 32: {
            Cash = input.ReadInt32();
            break;
          }
          case 40: {
            Saving = input.ReadInt32();
            break;
          }
          case 48: {
            Tickets = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class DFindPlayer : pb::IMessage {
    private static readonly pb::MessageParser<DFindPlayer> _parser = new pb::MessageParser<DFindPlayer>(() => (DFindPlayer)MessagePool.Instance.Fetch(typeof(DFindPlayer)));
    public static pb::MessageParser<DFindPlayer> Parser { get { return _parser; } }

    private global::ETModel.DUserSimpleInfo playerInfo_;
    /// <summary>
    /// 玩家信息
    /// </summary>
    public global::ETModel.DUserSimpleInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (playerInfo_ != null) MessagePool.Instance.Recycle(playerInfo_); playerInfo_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::ETModel.DUserSimpleInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
        }
      }
    }

  }

  public partial class DVec3 : pb::IMessage {
    private static readonly pb::MessageParser<DVec3> _parser = new pb::MessageParser<DVec3>(() => (DVec3)MessagePool.Instance.Fetch(typeof(DVec3)));
    public static pb::MessageParser<DVec3> Parser { get { return _parser; } }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class DVec4 : pb::IMessage {
    private static readonly pb::MessageParser<DVec4> _parser = new pb::MessageParser<DVec4>(() => (DVec4)MessagePool.Instance.Fetch(typeof(DVec4)));
    public static pb::MessageParser<DVec4> Parser { get { return _parser; } }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    private float w_;
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      w_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class DLockStepFrameEvent : pb::IMessage {
    private static readonly pb::MessageParser<DLockStepFrameEvent> _parser = new pb::MessageParser<DLockStepFrameEvent>(() => (DLockStepFrameEvent)MessagePool.Instance.Fetch(typeof(DLockStepFrameEvent)));
    public static pb::MessageParser<DLockStepFrameEvent> Parser { get { return _parser; } }

    private int eventId_;
    /// <summary>
    /// 事件ID
    /// </summary>
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    private int camp_;
    /// <summary>
    /// 阵营
    /// </summary>
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    private int path_;
    /// <summary>
    /// 路线
    /// </summary>
    public int Path {
      get { return path_; }
      set {
        path_ = value;
      }
    }

    private int tbid_;
    /// <summary>
    /// 配表ID
    /// </summary>
    public int Tbid {
      get { return tbid_; }
      set {
        tbid_ = value;
      }
    }

    private string uid_ = "";
    /// <summary>
    /// ID
    /// </summary>
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string nickName_ = "";
    /// <summary>
    /// 玩家昵称
    /// </summary>
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string headIcon_ = "";
    /// <summary>
    /// 玩家头像
    /// </summary>
    public string HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long num_;
    /// <summary>
    /// 数量	
    /// </summary>
    public long Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    private long totalExp_;
    /// <summary>
    /// 总积分
    /// </summary>
    public long TotalExp {
      get { return totalExp_; }
      set {
        totalExp_ = value;
      }
    }

    private long totalWin_;
    /// <summary>
    /// 连胜
    /// </summary>
    public long TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    private int unitLev_;
    /// <summary>
    /// 单位等级
    /// </summary>
    public int UnitLev {
      get { return unitLev_; }
      set {
        unitLev_ = value;
      }
    }

    private int pay_;
    /// <summary>
    /// 是否为付费事件
    /// </summary>
    public int Pay {
      get { return pay_; }
      set {
        pay_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EventId);
      }
      if (Camp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Camp);
      }
      if (Path != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Path);
      }
      if (Tbid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Tbid);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Uid);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(NickName);
      }
      if (HeadIcon.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(HeadIcon);
      }
      if (Num != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Num);
      }
      if (TotalExp != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(TotalExp);
      }
      if (TotalWin != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(TotalWin);
      }
      if (UnitLev != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(UnitLev);
      }
      if (Pay != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Pay);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      if (Path != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Path);
      }
      if (Tbid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tbid);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (HeadIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadIcon);
      }
      if (Num != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Num);
      }
      if (TotalExp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalExp);
      }
      if (TotalWin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalWin);
      }
      if (UnitLev != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitLev);
      }
      if (Pay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pay);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      eventId_ = 0;
      camp_ = 0;
      path_ = 0;
      tbid_ = 0;
      uid_ = "";
      nickName_ = "";
      headIcon_ = "";
      num_ = 0;
      totalExp_ = 0;
      totalWin_ = 0;
      unitLev_ = 0;
      pay_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EventId = input.ReadInt32();
            break;
          }
          case 16: {
            Camp = input.ReadInt32();
            break;
          }
          case 24: {
            Path = input.ReadInt32();
            break;
          }
          case 32: {
            Tbid = input.ReadInt32();
            break;
          }
          case 42: {
            Uid = input.ReadString();
            break;
          }
          case 50: {
            NickName = input.ReadString();
            break;
          }
          case 58: {
            HeadIcon = input.ReadString();
            break;
          }
          case 64: {
            Num = input.ReadInt64();
            break;
          }
          case 72: {
            TotalExp = input.ReadInt64();
            break;
          }
          case 80: {
            TotalWin = input.ReadInt64();
            break;
          }
          case 88: {
            UnitLev = input.ReadInt32();
            break;
          }
          case 96: {
            Pay = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
