// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETModel {

  #region Messages
  public partial class C2R_Regist : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Regist> _parser = new pb::MessageParser<C2R_Regist>(() => (C2R_Regist)MessagePool.Instance.Fetch(typeof(C2R_Regist)));
    public static pb::MessageParser<C2R_Regist> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    /// <summary>
    /// 帐号
    /// </summary>
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    /// <summary>
    /// 密码
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string name_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int loginType_;
    /// <summary>
    /// 注册类型
    /// </summary>
    public int LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (LoginType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LoginType);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      name_ = "";
      loginType_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            LoginType = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Regist : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Regist> _parser = new pb::MessageParser<R2C_Regist>(() => (R2C_Regist)MessagePool.Instance.Fetch(typeof(R2C_Regist)));
    public static pb::MessageParser<R2C_Regist> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2R_Login : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Login> _parser = new pb::MessageParser<C2R_Login>(() => (C2R_Login)MessagePool.Instance.Fetch(typeof(C2R_Login)));
    public static pb::MessageParser<C2R_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string platformID_ = "";
    /// <summary>
    ///主播登录ID
    /// </summary>
    public string PlatformID {
      get { return platformID_; }
      set {
        platformID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int loginType_;
    /// <summary>
    ///登录类型
    /// </summary>
    public int LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlatformID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlatformID);
      }
      if (LoginType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LoginType);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (PlatformID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformID);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      platformID_ = "";
      loginType_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlatformID = input.ReadString();
            break;
          }
          case 16: {
            LoginType = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Login : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Login> _parser = new pb::MessageParser<R2C_Login>(() => (R2C_Login)MessagePool.Instance.Fetch(typeof(R2C_Login)));
    public static pb::MessageParser<R2C_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      address_ = "";
      key_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<C2G_LoginGate> _parser = new pb::MessageParser<C2G_LoginGate>(() => (C2G_LoginGate)MessagePool.Instance.Fetch(typeof(C2G_LoginGate)));
    public static pb::MessageParser<C2G_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long key_;
    /// <summary>
    /// 帐号
    /// </summary>
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    private string platformID_ = "";
    /// <summary>
    ///平台ID
    /// </summary>
    public string PlatformID {
      get { return platformID_; }
      set {
        platformID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string nickName_ = "";
    /// <summary>
    ///名字
    /// </summary>
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string headIcon_ = "";
    /// <summary>
    ///头像
    /// </summary>
    public string HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (PlatformID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlatformID);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NickName);
      }
      if (HeadIcon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HeadIcon);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (PlatformID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformID);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (HeadIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadIcon);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      key_ = 0;
      platformID_ = "";
      nickName_ = "";
      headIcon_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 18: {
            PlatformID = input.ReadString();
            break;
          }
          case 26: {
            NickName = input.ReadString();
            break;
          }
          case 34: {
            HeadIcon = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_LoginGate> _parser = new pb::MessageParser<G2C_LoginGate>(() => (G2C_LoginGate)MessagePool.Instance.Fetch(typeof(G2C_LoginGate)));
    public static pb::MessageParser<G2C_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETModel.DUserInfo userInfo_;
    public global::ETModel.DUserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (userInfo_ != null) MessagePool.Instance.Recycle(userInfo_); userInfo_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userInfo_ == null) {
              userInfo_ = new global::ETModel.DUserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登出
  /// </summary>
  public partial class C2G_LogOut : pb::IMessage {
    private static readonly pb::MessageParser<C2G_LogOut> _parser = new pb::MessageParser<C2G_LogOut>(() => (C2G_LogOut)MessagePool.Instance.Fetch(typeof(C2G_LogOut)));
    public static pb::MessageParser<C2G_LogOut> Parser { get { return _parser; } }

    private long userId_;
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///被踢下线
  /// </summary>
  public partial class G2C_KickOut : pb::IMessage {
    private static readonly pb::MessageParser<G2C_KickOut> _parser = new pb::MessageParser<G2C_KickOut>(() => (G2C_KickOut)MessagePool.Instance.Fetch(typeof(G2C_KickOut)));
    public static pb::MessageParser<G2C_KickOut> Parser { get { return _parser; } }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取用户信息
  /// </summary>
  public partial class C2G_GetUserInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2G_GetUserInfo> _parser = new pb::MessageParser<C2G_GetUserInfo>(() => (C2G_GetUserInfo)MessagePool.Instance.Fetch(typeof(C2G_GetUserInfo)));
    public static pb::MessageParser<C2G_GetUserInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回用户信息
  /// </summary>
  public partial class G2C_GetUserInfo : pb::IMessage {
    private static readonly pb::MessageParser<G2C_GetUserInfo> _parser = new pb::MessageParser<G2C_GetUserInfo>(() => (G2C_GetUserInfo)MessagePool.Instance.Fetch(typeof(G2C_GetUserInfo)));
    public static pb::MessageParser<G2C_GetUserInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETModel.DUserInfo userInfo_;
    public global::ETModel.DUserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (userInfo_ != null) MessagePool.Instance.Recycle(userInfo_); userInfo_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userInfo_ == null) {
              userInfo_ = new global::ETModel.DUserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建房间
  /// </summary>
  public partial class C2G_CreateRoom : pb::IMessage {
    private static readonly pb::MessageParser<C2G_CreateRoom> _parser = new pb::MessageParser<C2G_CreateRoom>(() => (C2G_CreateRoom)MessagePool.Instance.Fetch(typeof(C2G_CreateRoom)));
    public static pb::MessageParser<C2G_CreateRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private global::ETModel.DRoomConfig roomConfig_;
    /// <summary>
    ///房间配置
    /// </summary>
    public global::ETModel.DRoomConfig RoomConfig {
      get { return roomConfig_; }
      set {
        roomConfig_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roomConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomConfig);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (roomConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomConfig);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (roomConfig_ != null) MessagePool.Instance.Recycle(roomConfig_); roomConfig_ = null;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roomConfig_ == null) {
              roomConfig_ = new global::ETModel.DRoomConfig();
            }
            input.ReadMessage(roomConfig_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回创建房间信息
  /// </summary>
  public partial class G2C_CreateRoom : pb::IMessage {
    private static readonly pb::MessageParser<G2C_CreateRoom> _parser = new pb::MessageParser<G2C_CreateRoom>(() => (G2C_CreateRoom)MessagePool.Instance.Fetch(typeof(G2C_CreateRoom)));
    public static pb::MessageParser<G2C_CreateRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///退出房间
  /// </summary>
  public partial class C2G_ExitRoom : pb::IMessage {
    private static readonly pb::MessageParser<C2G_ExitRoom> _parser = new pb::MessageParser<C2G_ExitRoom>(() => (C2G_ExitRoom)MessagePool.Instance.Fetch(typeof(C2G_ExitRoom)));
    public static pb::MessageParser<C2G_ExitRoom> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///加入房间
  /// </summary>
  public partial class C2G_JoinRoom : pb::IMessage {
    private static readonly pb::MessageParser<C2G_JoinRoom> _parser = new pb::MessageParser<C2G_JoinRoom>(() => (C2G_JoinRoom)MessagePool.Instance.Fetch(typeof(C2G_JoinRoom)));
    public static pb::MessageParser<C2G_JoinRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string roomID_ = "";
    /// <summary>
    ///房间ID
    /// </summary>
    public string RoomID {
      get { return roomID_; }
      set {
        roomID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomID);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomID);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomID_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoomID = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加入房间的反馈
  /// </summary>
  public partial class G2C_JoinRoom : pb::IMessage {
    private static readonly pb::MessageParser<G2C_JoinRoom> _parser = new pb::MessageParser<G2C_JoinRoom>(() => (G2C_JoinRoom)MessagePool.Instance.Fetch(typeof(G2C_JoinRoom)));
    public static pb::MessageParser<G2C_JoinRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取房间列表
  /// </summary>
  public partial class C2G_GetRoomList : pb::IMessage {
    private static readonly pb::MessageParser<C2G_GetRoomList> _parser = new pb::MessageParser<C2G_GetRoomList>(() => (C2G_GetRoomList)MessagePool.Instance.Fetch(typeof(C2G_GetRoomList)));
    public static pb::MessageParser<C2G_GetRoomList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取房间列表反馈
  /// </summary>
  public partial class G2C_GetRoomList : pb::IMessage {
    private static readonly pb::MessageParser<G2C_GetRoomList> _parser = new pb::MessageParser<G2C_GetRoomList>(() => (G2C_GetRoomList)MessagePool.Instance.Fetch(typeof(G2C_GetRoomList)));
    public static pb::MessageParser<G2C_GetRoomList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.DRoomSimpleInfo> _repeated_rooms_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.DRoomSimpleInfo.Parser);
    private pbc::RepeatedField<global::ETModel.DRoomSimpleInfo> rooms_ = new pbc::RepeatedField<global::ETModel.DRoomSimpleInfo>();
    /// <summary>
    /// 房间列表信息
    /// </summary>
    public pbc::RepeatedField<global::ETModel.DRoomSimpleInfo> Rooms {
      get { return rooms_; }
      set { rooms_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      rooms_.WriteTo(output, _repeated_rooms_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += rooms_.CalculateSize(_repeated_rooms_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < rooms_.Count; i++) { MessagePool.Instance.Recycle(rooms_[i]); }
      rooms_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入房间(广播)
  /// </summary>
  public partial class Actor_EnterRoom_M2C : pb::IMessage {
    private static readonly pb::MessageParser<Actor_EnterRoom_M2C> _parser = new pb::MessageParser<Actor_EnterRoom_M2C>(() => (Actor_EnterRoom_M2C)MessagePool.Instance.Fetch(typeof(Actor_EnterRoom_M2C)));
    public static pb::MessageParser<Actor_EnterRoom_M2C> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETModel.DRoomInfo roomInfo_;
    public global::ETModel.DRoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (roomInfo_ != null) MessagePool.Instance.Recycle(roomInfo_); roomInfo_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::ETModel.DRoomInfo();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///退出房间(广播)
  /// </summary>
  public partial class Actor_PlayerEnterRoom_M2C : pb::IMessage {
    private static readonly pb::MessageParser<Actor_PlayerEnterRoom_M2C> _parser = new pb::MessageParser<Actor_PlayerEnterRoom_M2C>(() => (Actor_PlayerEnterRoom_M2C)MessagePool.Instance.Fetch(typeof(Actor_PlayerEnterRoom_M2C)));
    public static pb::MessageParser<Actor_PlayerEnterRoom_M2C> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETModel.DRoomSeatInfo seatInfo_;
    public global::ETModel.DRoomSeatInfo SeatInfo {
      get { return seatInfo_; }
      set {
        seatInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (seatInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SeatInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (seatInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SeatInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (seatInfo_ != null) MessagePool.Instance.Recycle(seatInfo_); seatInfo_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (seatInfo_ == null) {
              seatInfo_ = new global::ETModel.DRoomSeatInfo();
            }
            input.ReadMessage(seatInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///退出房间(广播)
  /// </summary>
  public partial class Actor_PlayerExitRoom_M2C : pb::IMessage {
    private static readonly pb::MessageParser<Actor_PlayerExitRoom_M2C> _parser = new pb::MessageParser<Actor_PlayerExitRoom_M2C>(() => (Actor_PlayerExitRoom_M2C)MessagePool.Instance.Fetch(typeof(Actor_PlayerExitRoom_M2C)));
    public static pb::MessageParser<Actor_PlayerExitRoom_M2C> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long userID_;
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userID_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///准备
  /// </summary>
  public partial class C2G_GameReady : pb::IMessage {
    private static readonly pb::MessageParser<C2G_GameReady> _parser = new pb::MessageParser<C2G_GameReady>(() => (C2G_GameReady)MessagePool.Instance.Fetch(typeof(C2G_GameReady)));
    public static pb::MessageParser<C2G_GameReady> Parser { get { return _parser; } }

    private bool ready_;
    public bool Ready {
      get { return ready_; }
      set {
        ready_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Ready != false) {
        output.WriteRawTag(8);
        output.WriteBool(Ready);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Ready != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      ready_ = false;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ready = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///退出房间(广播)
  /// </summary>
  public partial class Actor_PlayerReady_M2C : pb::IMessage {
    private static readonly pb::MessageParser<Actor_PlayerReady_M2C> _parser = new pb::MessageParser<Actor_PlayerReady_M2C>(() => (Actor_PlayerReady_M2C)MessagePool.Instance.Fetch(typeof(Actor_PlayerReady_M2C)));
    public static pb::MessageParser<Actor_PlayerReady_M2C> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long userID_;
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    private bool ready_;
    public bool Ready {
      get { return ready_; }
      set {
        ready_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (Ready != false) {
        output.WriteRawTag(16);
        output.WriteBool(Ready);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Ready != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userID_ = 0;
      ready_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            Ready = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏开始广播
  /// </summary>
  public partial class Actor_GameStart_M2C : pb::IMessage {
    private static readonly pb::MessageParser<Actor_GameStart_M2C> _parser = new pb::MessageParser<Actor_GameStart_M2C>(() => (Actor_GameStart_M2C)MessagePool.Instance.Fetch(typeof(Actor_GameStart_M2C)));
    public static pb::MessageParser<Actor_GameStart_M2C> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.DGameUnit> _repeated_units_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.DGameUnit.Parser);
    private pbc::RepeatedField<global::ETModel.DGameUnit> units_ = new pbc::RepeatedField<global::ETModel.DGameUnit>();
    public pbc::RepeatedField<global::ETModel.DGameUnit> Units {
      get { return units_; }
      set { units_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      units_.WriteTo(output, _repeated_units_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < units_.Count; i++) { MessagePool.Instance.Recycle(units_[i]); }
      units_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏开始广播
  /// </summary>
  public partial class Actor_GameReconnect_M2C : pb::IMessage {
    private static readonly pb::MessageParser<Actor_GameReconnect_M2C> _parser = new pb::MessageParser<Actor_GameReconnect_M2C>(() => (Actor_GameReconnect_M2C)MessagePool.Instance.Fetch(typeof(Actor_GameReconnect_M2C)));
    public static pb::MessageParser<Actor_GameReconnect_M2C> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETModel.DRoomInfo roomInfo_;
    public global::ETModel.DRoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.DGameUnit> _repeated_units_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.DGameUnit.Parser);
    private pbc::RepeatedField<global::ETModel.DGameUnit> units_ = new pbc::RepeatedField<global::ETModel.DGameUnit>();
    public pbc::RepeatedField<global::ETModel.DGameUnit> Units {
      get { return units_; }
      set { units_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      units_.WriteTo(output, _repeated_units_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (roomInfo_ != null) MessagePool.Instance.Recycle(roomInfo_); roomInfo_ = null;
      for (int i = 0; i < units_.Count; i++) { MessagePool.Instance.Recycle(units_[i]); }
      units_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::ETModel.DRoomInfo();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
          case 18: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查询已有游戏
  /// </summary>
  public partial class C2G_IsInGame : pb::IMessage {
    private static readonly pb::MessageParser<C2G_IsInGame> _parser = new pb::MessageParser<C2G_IsInGame>(() => (C2G_IsInGame)MessagePool.Instance.Fetch(typeof(C2G_IsInGame)));
    public static pb::MessageParser<C2G_IsInGame> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_IsInGame : pb::IMessage {
    private static readonly pb::MessageParser<G2C_IsInGame> _parser = new pb::MessageParser<G2C_IsInGame>(() => (G2C_IsInGame)MessagePool.Instance.Fetch(typeof(G2C_IsInGame)));
    public static pb::MessageParser<G2C_IsInGame> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string roomID_ = "";
    public string RoomID {
      get { return roomID_; }
      set {
        roomID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomID);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (RoomID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomID);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomID_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoomID = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重连进入游戏
  /// </summary>
  public partial class C2G_ReconnectGame : pb::IMessage {
    private static readonly pb::MessageParser<C2G_ReconnectGame> _parser = new pb::MessageParser<C2G_ReconnectGame>(() => (C2G_ReconnectGame)MessagePool.Instance.Fetch(typeof(C2G_ReconnectGame)));
    public static pb::MessageParser<C2G_ReconnectGame> Parser { get { return _parser; } }

    private string roomID_ = "";
    public string RoomID {
      get { return roomID_; }
      set {
        roomID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomID);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RoomID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomID);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomID_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoomID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
