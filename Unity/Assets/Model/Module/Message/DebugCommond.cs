// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DebugCommond.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETModel {

  #region Messages
  public partial class C2G_CmdAddDiamond : pb::IMessage {
    private static readonly pb::MessageParser<C2G_CmdAddDiamond> _parser = new pb::MessageParser<C2G_CmdAddDiamond>(() => (C2G_CmdAddDiamond)MessagePool.Instance.Fetch(typeof(C2G_CmdAddDiamond)));
    public static pb::MessageParser<C2G_CmdAddDiamond> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int addDiamond_;
    /// <summary>
    /// 增加钻石数
    /// </summary>
    public int AddDiamond {
      get { return addDiamond_; }
      set {
        addDiamond_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AddDiamond != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AddDiamond);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (AddDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddDiamond);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      addDiamond_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AddDiamond = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_CmdAddDiamond : pb::IMessage {
    private static readonly pb::MessageParser<G2C_CmdAddDiamond> _parser = new pb::MessageParser<G2C_CmdAddDiamond>(() => (G2C_CmdAddDiamond)MessagePool.Instance.Fetch(typeof(G2C_CmdAddDiamond)));
    public static pb::MessageParser<G2C_CmdAddDiamond> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int diamond_;
    /// <summary>
    /// 当前钻石数
    /// </summary>
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Diamond != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Diamond);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      diamond_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Diamond = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_CmdAddMoney : pb::IMessage {
    private static readonly pb::MessageParser<C2G_CmdAddMoney> _parser = new pb::MessageParser<C2G_CmdAddMoney>(() => (C2G_CmdAddMoney)MessagePool.Instance.Fetch(typeof(C2G_CmdAddMoney)));
    public static pb::MessageParser<C2G_CmdAddMoney> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long addMoney_;
    /// <summary>
    /// 增加金币数
    /// </summary>
    public long AddMoney {
      get { return addMoney_; }
      set {
        addMoney_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AddMoney != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AddMoney);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (AddMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AddMoney);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      addMoney_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AddMoney = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_CmdAddMoney : pb::IMessage {
    private static readonly pb::MessageParser<G2C_CmdAddMoney> _parser = new pb::MessageParser<G2C_CmdAddMoney>(() => (G2C_CmdAddMoney)MessagePool.Instance.Fetch(typeof(G2C_CmdAddMoney)));
    public static pb::MessageParser<G2C_CmdAddMoney> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long money_;
    /// <summary>
    /// 当前金币数
    /// </summary>
    public long Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Money != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Money);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Money != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Money);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      money_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Money = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_CmdAddIcon : pb::IMessage {
    private static readonly pb::MessageParser<C2G_CmdAddIcon> _parser = new pb::MessageParser<C2G_CmdAddIcon>(() => (C2G_CmdAddIcon)MessagePool.Instance.Fetch(typeof(C2G_CmdAddIcon)));
    public static pb::MessageParser<C2G_CmdAddIcon> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string icon_ = "";
    /// <summary>
    /// 增加头像
    /// </summary>
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Icon.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Icon);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      icon_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Icon = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_CmdAddIcon : pb::IMessage {
    private static readonly pb::MessageParser<G2C_CmdAddIcon> _parser = new pb::MessageParser<G2C_CmdAddIcon>(() => (G2C_CmdAddIcon)MessagePool.Instance.Fetch(typeof(G2C_CmdAddIcon)));
    public static pb::MessageParser<G2C_CmdAddIcon> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string icon_ = "";
    /// <summary>
    /// 已增加的头像
    /// </summary>
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Icon.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Icon);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      icon_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Icon = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_CmdAddIconBG : pb::IMessage {
    private static readonly pb::MessageParser<C2G_CmdAddIconBG> _parser = new pb::MessageParser<C2G_CmdAddIconBG>(() => (C2G_CmdAddIconBG)MessagePool.Instance.Fetch(typeof(C2G_CmdAddIconBG)));
    public static pb::MessageParser<C2G_CmdAddIconBG> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string iconBG_ = "";
    /// <summary>
    /// 增加头像框
    /// </summary>
    public string IconBG {
      get { return iconBG_; }
      set {
        iconBG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IconBG.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IconBG);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (IconBG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconBG);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      iconBG_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IconBG = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_CmdAddIconBG : pb::IMessage {
    private static readonly pb::MessageParser<G2C_CmdAddIconBG> _parser = new pb::MessageParser<G2C_CmdAddIconBG>(() => (G2C_CmdAddIconBG)MessagePool.Instance.Fetch(typeof(G2C_CmdAddIconBG)));
    public static pb::MessageParser<G2C_CmdAddIconBG> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string iconBG_ = "";
    /// <summary>
    /// 已增加的头像框
    /// </summary>
    public string IconBG {
      get { return iconBG_; }
      set {
        iconBG_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IconBG.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IconBG);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (IconBG.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconBG);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      iconBG_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            IconBG = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_CmdAddRole : pb::IMessage {
    private static readonly pb::MessageParser<C2G_CmdAddRole> _parser = new pb::MessageParser<C2G_CmdAddRole>(() => (C2G_CmdAddRole)MessagePool.Instance.Fetch(typeof(C2G_CmdAddRole)));
    public static pb::MessageParser<C2G_CmdAddRole> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int role_;
    /// <summary>
    /// 增加角色
    /// </summary>
    public int Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Role != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Role);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Role);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      role_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Role = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_CmdAddRole : pb::IMessage {
    private static readonly pb::MessageParser<G2C_CmdAddRole> _parser = new pb::MessageParser<G2C_CmdAddRole>(() => (G2C_CmdAddRole)MessagePool.Instance.Fetch(typeof(G2C_CmdAddRole)));
    public static pb::MessageParser<G2C_CmdAddRole> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int role_;
    /// <summary>
    /// 已增加的角色
    /// </summary>
    public int Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Role != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Role);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Role);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      role_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Role = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 解散房间
  /// </summary>
  public partial class C2G_CmdDelRoom : pb::IMessage {
    private static readonly pb::MessageParser<C2G_CmdDelRoom> _parser = new pb::MessageParser<C2G_CmdDelRoom>(() => (C2G_CmdDelRoom)MessagePool.Instance.Fetch(typeof(C2G_CmdDelRoom)));
    public static pb::MessageParser<C2G_CmdDelRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string roomID_ = "";
    public string RoomID {
      get { return roomID_; }
      set {
        roomID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomID);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomID);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomID_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoomID = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_CmdDelRoom : pb::IMessage {
    private static readonly pb::MessageParser<G2C_CmdDelRoom> _parser = new pb::MessageParser<G2C_CmdDelRoom>(() => (G2C_CmdDelRoom)MessagePool.Instance.Fetch(typeof(G2C_CmdDelRoom)));
    public static pb::MessageParser<G2C_CmdDelRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
