// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DouyuMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DouyuDanmu {

  #region Messages
  /// <summary>
  /// 公共信息
  /// </summary>
  public partial class PublicInfo : pb::IMessage {
    private static readonly pb::MessageParser<PublicInfo> _parser = new pb::MessageParser<PublicInfo>(() => (PublicInfo)MessagePool.Instance.Fetch(typeof(PublicInfo)));
    public static pb::MessageParser<PublicInfo> Parser { get { return _parser; } }

    private uint id_;
    /// <summary>
    /// 每次建立连接后，从0开始递增
    /// </summary>
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long milliTime_;
    /// <summary>
    /// 当前Unix毫秒
    /// </summary>
    public long MilliTime {
      get { return milliTime_; }
      set {
        milliTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (MilliTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MilliTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (MilliTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MilliTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      milliTime_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            MilliTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 用户信息
  /// </summary>
  public partial class UserInfo : pb::IMessage {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => (UserInfo)MessagePool.Instance.Fetch(typeof(UserInfo)));
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    private string userId_ = "";
    /// <summary>
    /// 用户ID
    /// </summary>
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string nick_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    public string Nick {
      get { return nick_; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string avatar_ = "";
    /// <summary>
    /// 头像URL
    /// </summary>
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string authOpenId_ = "";
    /// <summary>
    /// 用户授权ID
    /// </summary>
    public string AuthOpenId {
      get { return authOpenId_; }
      set {
        authOpenId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nick);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
      if (AuthOpenId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AuthOpenId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Nick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (AuthOpenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthOpenId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      userId_ = "";
      nick_ = "";
      avatar_ = "";
      authOpenId_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            Nick = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
          case 34: {
            AuthOpenId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 礼物信息
  /// </summary>
  public partial class GiftInfo : pb::IMessage {
    private static readonly pb::MessageParser<GiftInfo> _parser = new pb::MessageParser<GiftInfo>(() => (GiftInfo)MessagePool.Instance.Fetch(typeof(GiftInfo)));
    public static pb::MessageParser<GiftInfo> Parser { get { return _parser; } }

    private string giftId_ = "";
    /// <summary>
    /// 礼物ID
    /// </summary>
    public string GiftId {
      get { return giftId_; }
      set {
        giftId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string name_ = "";
    /// <summary>
    /// 礼物名称
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string icon_ = "";
    /// <summary>
    /// 图标URL
    /// </summary>
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GiftId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GiftId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Icon);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GiftId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GiftId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      giftId_ = "";
      name_ = "";
      icon_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GiftId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 道具信息
  /// </summary>
  public partial class PropInfo : pb::IMessage {
    private static readonly pb::MessageParser<PropInfo> _parser = new pb::MessageParser<PropInfo>(() => (PropInfo)MessagePool.Instance.Fetch(typeof(PropInfo)));
    public static pb::MessageParser<PropInfo> Parser { get { return _parser; } }

    private string propId_ = "";
    /// <summary>
    /// 道具ID
    /// </summary>
    public string PropId {
      get { return propId_; }
      set {
        propId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string name_ = "";
    /// <summary>
    /// 礼物名称
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string icon_ = "";
    /// <summary>
    /// 图标URL
    /// </summary>
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PropId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PropId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Icon);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PropId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PropId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      propId_ = "";
      name_ = "";
      icon_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PropId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 价值信息
  /// </summary>
  public partial class WorthInfo : pb::IMessage {
    private static readonly pb::MessageParser<WorthInfo> _parser = new pb::MessageParser<WorthInfo>(() => (WorthInfo)MessagePool.Instance.Fetch(typeof(WorthInfo)));
    public static pb::MessageParser<WorthInfo> Parser { get { return _parser; } }

    private string currency_ = "";
    /// <summary>
    /// 货币类型RMB
    /// </summary>
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private double totalPrice_;
    /// <summary>
    /// 总价格
    /// </summary>
    public double TotalPrice {
      get { return totalPrice_; }
      set {
        totalPrice_ = value;
      }
    }

    private uint amount_;
    /// <summary>
    /// 总数量
    /// </summary>
    public uint Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Currency.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Currency);
      }
      if (TotalPrice != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalPrice);
      }
      if (Amount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Amount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (TotalPrice != 0D) {
        size += 1 + 8;
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      currency_ = "";
      amount_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Currency = input.ReadString();
            break;
          }
          case 17: {
            TotalPrice = input.ReadDouble();
            break;
          }
          case 24: {
            Amount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 心跳 协议:-2
  /// </summary>
  public partial class HeartBeat : pb::IMessage {
    private static readonly pb::MessageParser<HeartBeat> _parser = new pb::MessageParser<HeartBeat>(() => (HeartBeat)MessagePool.Instance.Fetch(typeof(HeartBeat)));
    public static pb::MessageParser<HeartBeat> Parser { get { return _parser; } }

    private string token_ = "";
    /// <summary>
    /// token
    /// </summary>
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long milliTime_;
    /// <summary>
    /// 当前Unix毫秒
    /// </summary>
    public long MilliTime {
      get { return milliTime_; }
      set {
        milliTime_ = value;
      }
    }

    private uint interval_;
    /// <summary>
    /// 频率
    /// </summary>
    public uint Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (MilliTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MilliTime);
      }
      if (Interval != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Interval);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (MilliTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MilliTime);
      }
      if (Interval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Interval);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      token_ = "";
      milliTime_ = 0;
      interval_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            MilliTime = input.ReadInt64();
            break;
          }
          case 24: {
            Interval = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// token失效 协议:-1
  /// </summary>
  public partial class TokenInvalid : pb::IMessage {
    private static readonly pb::MessageParser<TokenInvalid> _parser = new pb::MessageParser<TokenInvalid>(() => (TokenInvalid)MessagePool.Instance.Fetch(typeof(TokenInvalid)));
    public static pb::MessageParser<TokenInvalid> Parser { get { return _parser; } }

    private string token_ = "";
    /// <summary>
    /// token
    /// </summary>
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      token_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 进入直播间 协议:1
  /// </summary>
  public partial class EnterRoom : pb::IMessage {
    private static readonly pb::MessageParser<EnterRoom> _parser = new pb::MessageParser<EnterRoom>(() => (EnterRoom)MessagePool.Instance.Fetch(typeof(EnterRoom)));
    public static pb::MessageParser<EnterRoom> Parser { get { return _parser; } }

    private global::DouyuDanmu.PublicInfo publicInfo_;
    public global::DouyuDanmu.PublicInfo PublicInfo {
      get { return publicInfo_; }
      set {
        publicInfo_ = value;
      }
    }

    private global::DouyuDanmu.UserInfo userInfo_;
    public global::DouyuDanmu.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (publicInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PublicInfo);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (publicInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublicInfo);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (publicInfo_ != null) MessagePool.Instance.Recycle(publicInfo_); publicInfo_ = null;
      if (userInfo_ != null) MessagePool.Instance.Recycle(userInfo_); userInfo_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (publicInfo_ == null) {
              publicInfo_ = new global::DouyuDanmu.PublicInfo();
            }
            input.ReadMessage(publicInfo_);
            break;
          }
          case 18: {
            if (userInfo_ == null) {
              userInfo_ = new global::DouyuDanmu.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 弹幕 协议:2
  /// </summary>
  public partial class Danmu : pb::IMessage {
    private static readonly pb::MessageParser<Danmu> _parser = new pb::MessageParser<Danmu>(() => (Danmu)MessagePool.Instance.Fetch(typeof(Danmu)));
    public static pb::MessageParser<Danmu> Parser { get { return _parser; } }

    private global::DouyuDanmu.PublicInfo publicInfo_;
    public global::DouyuDanmu.PublicInfo PublicInfo {
      get { return publicInfo_; }
      set {
        publicInfo_ = value;
      }
    }

    private global::DouyuDanmu.UserInfo userInfo_;
    public global::DouyuDanmu.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    private string content_ = "";
    /// <summary>
    /// 弹幕内容
    /// </summary>
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (publicInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PublicInfo);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserInfo);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (publicInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublicInfo);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (publicInfo_ != null) MessagePool.Instance.Recycle(publicInfo_); publicInfo_ = null;
      if (userInfo_ != null) MessagePool.Instance.Recycle(userInfo_); userInfo_ = null;
      content_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (publicInfo_ == null) {
              publicInfo_ = new global::DouyuDanmu.PublicInfo();
            }
            input.ReadMessage(publicInfo_);
            break;
          }
          case 18: {
            if (userInfo_ == null) {
              userInfo_ = new global::DouyuDanmu.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 礼物 协议:3
  /// </summary>
  public partial class Gift : pb::IMessage {
    private static readonly pb::MessageParser<Gift> _parser = new pb::MessageParser<Gift>(() => (Gift)MessagePool.Instance.Fetch(typeof(Gift)));
    public static pb::MessageParser<Gift> Parser { get { return _parser; } }

    private global::DouyuDanmu.PublicInfo publicInfo_;
    public global::DouyuDanmu.PublicInfo PublicInfo {
      get { return publicInfo_; }
      set {
        publicInfo_ = value;
      }
    }

    private global::DouyuDanmu.UserInfo userInfo_;
    public global::DouyuDanmu.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    private global::DouyuDanmu.GiftInfo giftInfo_;
    public global::DouyuDanmu.GiftInfo GiftInfo {
            get { return giftInfo_; }
      set {
        giftInfo_ = value;
      }
    }

    private global::DouyuDanmu.WorthInfo worthInfo_;
    public global::DouyuDanmu.WorthInfo WorthInfo {
      get { return worthInfo_; }
      set {
        worthInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (publicInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PublicInfo);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserInfo);
      }
      if (giftInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GiftInfo);
      }
      if (worthInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WorthInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (publicInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublicInfo);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      if (giftInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GiftInfo);
      }
      if (worthInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorthInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (publicInfo_ != null) MessagePool.Instance.Recycle(publicInfo_); publicInfo_ = null;
      if (userInfo_ != null) MessagePool.Instance.Recycle(userInfo_); userInfo_ = null;
      if (giftInfo_ != null) MessagePool.Instance.Recycle(giftInfo_); giftInfo_ = null;
      if (worthInfo_ != null) MessagePool.Instance.Recycle(worthInfo_); worthInfo_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (publicInfo_ == null) {
              publicInfo_ = new global::DouyuDanmu.PublicInfo();
            }
            input.ReadMessage(publicInfo_);
            break;
          }
          case 18: {
            if (userInfo_ == null) {
              userInfo_ = new global::DouyuDanmu.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
          case 26: {
            if (giftInfo_ == null) {
              giftInfo_ = new global::DouyuDanmu.GiftInfo();
            }
            input.ReadMessage(giftInfo_);
            break;
          }
          case 34: {
            if (worthInfo_ == null) {
              worthInfo_ = new global::DouyuDanmu.WorthInfo();
            }
            input.ReadMessage(worthInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 道具 协议:4
  /// </summary>
  public partial class Prop : pb::IMessage {
    private static readonly pb::MessageParser<Prop> _parser = new pb::MessageParser<Prop>(() => (Prop)MessagePool.Instance.Fetch(typeof(Prop)));
    public static pb::MessageParser<Prop> Parser { get { return _parser; } }

    private global::DouyuDanmu.PublicInfo publicInfo_;
    public global::DouyuDanmu.PublicInfo PublicInfo {
      get { return publicInfo_; }
      set {
        publicInfo_ = value;
      }
    }

    private global::DouyuDanmu.UserInfo userInfo_;
    public global::DouyuDanmu.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    private global::DouyuDanmu.PropInfo propInfo_;
    public global::DouyuDanmu.PropInfo PropInfo {
            get { return propInfo_; }
      set {
        propInfo_ = value;
      }
    }

    private global::DouyuDanmu.WorthInfo worthInfo_;
    public global::DouyuDanmu.WorthInfo WorthInfo {
      get { return worthInfo_; }
      set {
        worthInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (publicInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PublicInfo);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserInfo);
      }
      if (propInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PropInfo);
      }
      if (worthInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WorthInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (publicInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublicInfo);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      if (propInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropInfo);
      }
      if (worthInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorthInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (publicInfo_ != null) MessagePool.Instance.Recycle(publicInfo_); publicInfo_ = null;
      if (userInfo_ != null) MessagePool.Instance.Recycle(userInfo_); userInfo_ = null;
      if (propInfo_ != null) MessagePool.Instance.Recycle(propInfo_); propInfo_ = null;
      if (worthInfo_ != null) MessagePool.Instance.Recycle(worthInfo_); worthInfo_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (publicInfo_ == null) {
              publicInfo_ = new global::DouyuDanmu.PublicInfo();
            }
            input.ReadMessage(publicInfo_);
            break;
          }
          case 18: {
            if (userInfo_ == null) {
              userInfo_ = new global::DouyuDanmu.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
          case 26: {
            if (propInfo_ == null) {
              propInfo_ = new global::DouyuDanmu.PropInfo();
            }
            input.ReadMessage(propInfo_);
            break;
          }
          case 34: {
            if (worthInfo_ == null) {
              worthInfo_ = new global::DouyuDanmu.WorthInfo();
            }
            input.ReadMessage(worthInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 离开直播间 协议:6
  /// </summary>
  public partial class LeaveRoom : pb::IMessage {
    private static readonly pb::MessageParser<LeaveRoom> _parser = new pb::MessageParser<LeaveRoom>(() => (LeaveRoom)MessagePool.Instance.Fetch(typeof(LeaveRoom)));
    public static pb::MessageParser<LeaveRoom> Parser { get { return _parser; } }

    private global::DouyuDanmu.PublicInfo publicInfo_;
    public global::DouyuDanmu.PublicInfo PublicInfo {
      get { return publicInfo_; }
      set {
        publicInfo_ = value;
      }
    }

    private global::DouyuDanmu.UserInfo userInfo_;
    public global::DouyuDanmu.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (publicInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PublicInfo);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (publicInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublicInfo);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (publicInfo_ != null) MessagePool.Instance.Recycle(publicInfo_); publicInfo_ = null;
      if (userInfo_ != null) MessagePool.Instance.Recycle(userInfo_); userInfo_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (publicInfo_ == null) {
              publicInfo_ = new global::DouyuDanmu.PublicInfo();
            }
            input.ReadMessage(publicInfo_);
            break;
          }
          case 18: {
            if (userInfo_ == null) {
              userInfo_ = new global::DouyuDanmu.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
